name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    name: Test & Build
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: 1.2.18

      - name: Cache node_modules
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            apps/*/node_modules
          key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lock') }}
          restore-keys: |
            ${{ runner.os }}-bun-

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Setup environment for CI
        run: |
          echo "NODE_ENV=test" >> $GITHUB_ENV
          echo "CI=true" >> $GITHUB_ENV

      - name: Lint code
        run: bun run lint

      - name: Build server first
        run: cd apps/server && bun run build

      - name: Type check
        run: bun run check-types

      - name: Run tests
        run: bun run test:ci

      - name: Run tests with coverage
        run: bun run test:coverage

      - name: Run performance tests
        run: bun run test:performance
        timeout-minutes: 15

      - name: Build applications
        run: bun run build
        
      - name: Validate API documentation
        run: bun run docs:validate
        env:
          AUTO_SYNC_DOCS: false
        
      - name: Quality Gate Check
        run: cd apps/server && bun run quality:gate
        env:
          CI: true
        
      - name: Security Gate Check
        run: cd apps/server && bun run security:gate
        env:
          CI: true

      - name: Upload coverage reports to Codecov
        if: success()
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: false

  codeql-analysis:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    needs: test
    permissions:
      security-events: write
      actions: read
      contents: read

    strategy:
      fail-fast: false
      matrix:
        language: ['typescript']

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
          queries: +security-and-quality

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: 1.2.18

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Build for CodeQL
        run: bun run build

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{ matrix.language }}"

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test
    permissions:
      security-events: write
      actions: read
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: 1.2.18

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'
          exit-code: '0'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high --all-projects

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [test, codeql-analysis, security-scan]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment: staging

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: 1.2.18

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Build for production
        run: bun run build
        env:
          NODE_ENV: production

      - name: Deploy to staging
        run: echo "Deploy to staging environment"
        # TODO: Add actual deployment steps

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [test, codeql-analysis, security-scan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: 1.2.18

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Build for production
        run: bun run build
        env:
          NODE_ENV: production

      - name: Deploy to production
        run: echo "Deploy to production environment"
        # TODO: Add actual deployment steps

      - name: Health check
        run: |
          echo "Running post-deployment health checks"
          # TODO: Add health check endpoints
          
      - name: Rollback on failure
        if: failure()
        run: |
          echo "Deployment failed, initiating rollback"
          # TODO: Add rollback mechanism